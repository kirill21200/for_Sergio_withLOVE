#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Example
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="aero")]
	public partial class AeroDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Определения метода расширяемости
    partial void OnCreated();
    partial void InsertCompany(Company instance);
    partial void UpdateCompany(Company instance);
    partial void DeleteCompany(Company instance);
    partial void InsertPass_in_trip(Pass_in_trip instance);
    partial void UpdatePass_in_trip(Pass_in_trip instance);
    partial void DeletePass_in_trip(Pass_in_trip instance);
    partial void InsertPassenger(Passenger instance);
    partial void UpdatePassenger(Passenger instance);
    partial void DeletePassenger(Passenger instance);
    partial void InsertTrip(Trip instance);
    partial void UpdateTrip(Trip instance);
    partial void DeleteTrip(Trip instance);
    #endregion
		
		public AeroDataContext() : 
				base(global::Example.Properties.Settings.Default.aeroConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public AeroDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AeroDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AeroDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AeroDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Company> Company
		{
			get
			{
				return this.GetTable<Company>();
			}
		}
		
		public System.Data.Linq.Table<Pass_in_trip> Pass_in_trip
		{
			get
			{
				return this.GetTable<Pass_in_trip>();
			}
		}
		
		public System.Data.Linq.Table<Passenger> Passenger
		{
			get
			{
				return this.GetTable<Passenger>();
			}
		}
		
		public System.Data.Linq.Table<Trip> Trip
		{
			get
			{
				return this.GetTable<Trip>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Company")]
	public partial class Company : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_comp;
		
		private string _name;
		
		private EntitySet<Trip> _Trip;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_compChanging(int value);
    partial void OnID_compChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public Company()
		{
			this._Trip = new EntitySet<Trip>(new Action<Trip>(this.attach_Trip), new Action<Trip>(this.detach_Trip));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_comp", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_comp
		{
			get
			{
				return this._ID_comp;
			}
			set
			{
				if ((this._ID_comp != value))
				{
					this.OnID_compChanging(value);
					this.SendPropertyChanging();
					this._ID_comp = value;
					this.SendPropertyChanged("ID_comp");
					this.OnID_compChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="Char(10) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Trip", Storage="_Trip", ThisKey="ID_comp", OtherKey="ID_comp")]
		public EntitySet<Trip> Trip
		{
			get
			{
				return this._Trip;
			}
			set
			{
				this._Trip.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Trip(Trip entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_Trip(Trip entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Pass_in_trip")]
	public partial class Pass_in_trip : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _trip_no;
		
		private System.DateTime _date;
		
		private int _ID_psg;
		
		private string _place;
		
		private EntityRef<Passenger> _Passenger;
		
		private EntityRef<Trip> _Trip;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Ontrip_noChanging(int value);
    partial void Ontrip_noChanged();
    partial void OndateChanging(System.DateTime value);
    partial void OndateChanged();
    partial void OnID_psgChanging(int value);
    partial void OnID_psgChanged();
    partial void OnplaceChanging(string value);
    partial void OnplaceChanged();
    #endregion
		
		public Pass_in_trip()
		{
			this._Passenger = default(EntityRef<Passenger>);
			this._Trip = default(EntityRef<Trip>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_trip_no", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int trip_no
		{
			get
			{
				return this._trip_no;
			}
			set
			{
				if ((this._trip_no != value))
				{
					if (this._Trip.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Ontrip_noChanging(value);
					this.SendPropertyChanging();
					this._trip_no = value;
					this.SendPropertyChanged("trip_no");
					this.Ontrip_noChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date", DbType="DateTime NOT NULL", IsPrimaryKey=true)]
		public System.DateTime date
		{
			get
			{
				return this._date;
			}
			set
			{
				if ((this._date != value))
				{
					this.OndateChanging(value);
					this.SendPropertyChanging();
					this._date = value;
					this.SendPropertyChanged("date");
					this.OndateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_psg", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID_psg
		{
			get
			{
				return this._ID_psg;
			}
			set
			{
				if ((this._ID_psg != value))
				{
					if (this._Passenger.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_psgChanging(value);
					this.SendPropertyChanging();
					this._ID_psg = value;
					this.SendPropertyChanged("ID_psg");
					this.OnID_psgChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_place", DbType="Char(10) NOT NULL", CanBeNull=false)]
		public string place
		{
			get
			{
				return this._place;
			}
			set
			{
				if ((this._place != value))
				{
					this.OnplaceChanging(value);
					this.SendPropertyChanging();
					this._place = value;
					this.SendPropertyChanged("place");
					this.OnplaceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Passenger_Pass_in_trip", Storage="_Passenger", ThisKey="ID_psg", OtherKey="ID_psg", IsForeignKey=true)]
		public Passenger Passenger
		{
			get
			{
				return this._Passenger.Entity;
			}
			set
			{
				Passenger previousValue = this._Passenger.Entity;
				if (((previousValue != value) 
							|| (this._Passenger.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Passenger.Entity = null;
						previousValue.Pass_in_trip.Remove(this);
					}
					this._Passenger.Entity = value;
					if ((value != null))
					{
						value.Pass_in_trip.Add(this);
						this._ID_psg = value.ID_psg;
					}
					else
					{
						this._ID_psg = default(int);
					}
					this.SendPropertyChanged("Passenger");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Trip_Pass_in_trip", Storage="_Trip", ThisKey="trip_no", OtherKey="trip_no", IsForeignKey=true)]
		public Trip Trip
		{
			get
			{
				return this._Trip.Entity;
			}
			set
			{
				Trip previousValue = this._Trip.Entity;
				if (((previousValue != value) 
							|| (this._Trip.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Trip.Entity = null;
						previousValue.Pass_in_trip.Remove(this);
					}
					this._Trip.Entity = value;
					if ((value != null))
					{
						value.Pass_in_trip.Add(this);
						this._trip_no = value.trip_no;
					}
					else
					{
						this._trip_no = default(int);
					}
					this.SendPropertyChanged("Trip");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Passenger")]
	public partial class Passenger : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_psg;
		
		private string _name;
		
		private EntitySet<Pass_in_trip> _Pass_in_trip;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_psgChanging(int value);
    partial void OnID_psgChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public Passenger()
		{
			this._Pass_in_trip = new EntitySet<Pass_in_trip>(new Action<Pass_in_trip>(this.attach_Pass_in_trip), new Action<Pass_in_trip>(this.detach_Pass_in_trip));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_psg", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_psg
		{
			get
			{
				return this._ID_psg;
			}
			set
			{
				if ((this._ID_psg != value))
				{
					this.OnID_psgChanging(value);
					this.SendPropertyChanging();
					this._ID_psg = value;
					this.SendPropertyChanged("ID_psg");
					this.OnID_psgChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="Char(20) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Passenger_Pass_in_trip", Storage="_Pass_in_trip", ThisKey="ID_psg", OtherKey="ID_psg")]
		public EntitySet<Pass_in_trip> Pass_in_trip
		{
			get
			{
				return this._Pass_in_trip;
			}
			set
			{
				this._Pass_in_trip.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Pass_in_trip(Pass_in_trip entity)
		{
			this.SendPropertyChanging();
			entity.Passenger = this;
		}
		
		private void detach_Pass_in_trip(Pass_in_trip entity)
		{
			this.SendPropertyChanging();
			entity.Passenger = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Trip")]
	public partial class Trip : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _trip_no;
		
		private int _ID_comp;
		
		private string _plane;
		
		private string _town_from;
		
		private string _town_to;
		
		private System.DateTime _time_out;
		
		private System.DateTime _time_in;
		
		private EntitySet<Pass_in_trip> _Pass_in_trip;
		
		private EntityRef<Company> _Company;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Ontrip_noChanging(int value);
    partial void Ontrip_noChanged();
    partial void OnID_compChanging(int value);
    partial void OnID_compChanged();
    partial void OnplaneChanging(string value);
    partial void OnplaneChanged();
    partial void Ontown_fromChanging(string value);
    partial void Ontown_fromChanged();
    partial void Ontown_toChanging(string value);
    partial void Ontown_toChanged();
    partial void Ontime_outChanging(System.DateTime value);
    partial void Ontime_outChanged();
    partial void Ontime_inChanging(System.DateTime value);
    partial void Ontime_inChanged();
    #endregion
		
		public Trip()
		{
			this._Pass_in_trip = new EntitySet<Pass_in_trip>(new Action<Pass_in_trip>(this.attach_Pass_in_trip), new Action<Pass_in_trip>(this.detach_Pass_in_trip));
			this._Company = default(EntityRef<Company>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_trip_no", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int trip_no
		{
			get
			{
				return this._trip_no;
			}
			set
			{
				if ((this._trip_no != value))
				{
					this.Ontrip_noChanging(value);
					this.SendPropertyChanging();
					this._trip_no = value;
					this.SendPropertyChanged("trip_no");
					this.Ontrip_noChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_comp", DbType="Int NOT NULL")]
		public int ID_comp
		{
			get
			{
				return this._ID_comp;
			}
			set
			{
				if ((this._ID_comp != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_compChanging(value);
					this.SendPropertyChanging();
					this._ID_comp = value;
					this.SendPropertyChanged("ID_comp");
					this.OnID_compChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_plane", DbType="Char(10) NOT NULL", CanBeNull=false)]
		public string plane
		{
			get
			{
				return this._plane;
			}
			set
			{
				if ((this._plane != value))
				{
					this.OnplaneChanging(value);
					this.SendPropertyChanging();
					this._plane = value;
					this.SendPropertyChanged("plane");
					this.OnplaneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_town_from", DbType="Char(25) NOT NULL", CanBeNull=false)]
		public string town_from
		{
			get
			{
				return this._town_from;
			}
			set
			{
				if ((this._town_from != value))
				{
					this.Ontown_fromChanging(value);
					this.SendPropertyChanging();
					this._town_from = value;
					this.SendPropertyChanged("town_from");
					this.Ontown_fromChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_town_to", DbType="Char(25) NOT NULL", CanBeNull=false)]
		public string town_to
		{
			get
			{
				return this._town_to;
			}
			set
			{
				if ((this._town_to != value))
				{
					this.Ontown_toChanging(value);
					this.SendPropertyChanging();
					this._town_to = value;
					this.SendPropertyChanged("town_to");
					this.Ontown_toChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_time_out", DbType="DateTime NOT NULL")]
		public System.DateTime time_out
		{
			get
			{
				return this._time_out;
			}
			set
			{
				if ((this._time_out != value))
				{
					this.Ontime_outChanging(value);
					this.SendPropertyChanging();
					this._time_out = value;
					this.SendPropertyChanged("time_out");
					this.Ontime_outChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_time_in", DbType="DateTime NOT NULL")]
		public System.DateTime time_in
		{
			get
			{
				return this._time_in;
			}
			set
			{
				if ((this._time_in != value))
				{
					this.Ontime_inChanging(value);
					this.SendPropertyChanging();
					this._time_in = value;
					this.SendPropertyChanged("time_in");
					this.Ontime_inChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Trip_Pass_in_trip", Storage="_Pass_in_trip", ThisKey="trip_no", OtherKey="trip_no")]
		public EntitySet<Pass_in_trip> Pass_in_trip
		{
			get
			{
				return this._Pass_in_trip;
			}
			set
			{
				this._Pass_in_trip.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Trip", Storage="_Company", ThisKey="ID_comp", OtherKey="ID_comp", IsForeignKey=true)]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.Trip.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.Trip.Add(this);
						this._ID_comp = value.ID_comp;
					}
					else
					{
						this._ID_comp = default(int);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Pass_in_trip(Pass_in_trip entity)
		{
			this.SendPropertyChanging();
			entity.Trip = this;
		}
		
		private void detach_Pass_in_trip(Pass_in_trip entity)
		{
			this.SendPropertyChanging();
			entity.Trip = null;
		}
	}
}
#pragma warning restore 1591
